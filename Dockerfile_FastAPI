# Dockerfile Best Practices - https://github.com/dnaprawa/dockerfile-best-practices
# Example of efficient Dockerfile - https://github.com/ArjanCodes/examples/blob/main/2025/efficient-python-dockerfile/Dockerfile.10_final

## ------------------------------- Stage 1: Build dependencies ------------------------------- ##
FROM python:3.13-bookworm AS builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on

# Install build dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    libpq-dev gcc python3-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Download the latest uv installer, install it and then remove it
ADD https://astral.sh/uv/install.sh /install.sh
RUN chmod -R 655 /install.sh && /install.sh && rm /install.sh

# Set up the UV environment path correctly
ENV PATH="/root/.local/bin:${PATH}"

# Set working directory
WORKDIR /api

# Copy only dependency files
COPY pyproject.toml README.md ./

# Create virtual environment and install dependencies
RUN uv sync

## ---------------------------------- Stage 2: Runtime image ---------------------------------- ##
FROM python:3.13-slim-bookworm AS production

# This adds metadata to the image, specifying the maintainer's name and email.
LABEL maintainer="Ryzhaiev Serhii <rsp89.we@gmail.com>"

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Install only runtime dependencies needed for PostgreSQL and others
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    libpq5 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Create non-root user
ARG UID=10000
ARG GID=10001
ENV UID=${UID}
ENV GID=${GID}

# Create user and group
RUN groupadd -g $GID docker_group && \
    useradd -m -u $UID -g docker_group docker_user

# Switch to non-root user
USER docker_user:docker_group

# Set working directory
WORKDIR /api

# Copy the installed dependencies (virtual environment) from the builder stage
COPY --from=builder /api/.venv .venv

# This copies all files from the current directory on the host to the working directory in the container.
COPY . .

# Set up environment variables for production
ENV PATH="/api/.venv/bin:$PATH"

# Expose port for FastAPI
EXPOSE 8000

# Command to run the FastAPI app with Gunicorn and Uvicorn worker
CMD ["gunicorn", "-k", "uvicorn.workers.UvicornWorker", "-w", "1", "-b", "0.0.0.0:8000", "--log-level", "info", "run:api"]
